<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 名称空间-->
<mapper namespace="com.zsh.mapper.BrandMapper">
<!--数据库表中的字段名称 和 实体类的属性名称不一样 则不能自动封装数据-->
<!--    起别名
           缺点 每次查询都要定义 一次别名 很麻烦-->
<!--          sql片段
                    resultMap
                    1 定义《resultMap> 标签
                    2 使用resultMap属性替换 resultType属性-->
<!--    sql片段-->
<!--    resultMap-->
<!--    id 唯一标识
        type 映射的类型 支持别名-->
    <resultMap id="brandResultMap" type="brand">
<!--        id 完成主键字段的映射
            result 完成一般字段的映射
                column 表的列名
                property 实体类的属性名-->
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"></result>
    </resultMap>
    <select id="selectAll" resultMap="brandResultMap">
        select  *
        from tb_brand
    </select>



    <!--    <sql id="brand_column">-->
<!--        id, brand_name as brandName, company_name as companyName, ordered, description, status-->
<!--        </sql>-->
<!--    <select id="selectAll" resultType="Brand">-->
<!--        select-->
<!--            <include refid="brand_column"></include>-->
<!--        from tb_brand;-->
<!--    </select>-->
<!--    <select id="selectAll" resultType="Brand">-->
<!--        select * from tb_brand;-->
<!--    </select>-->

<!--        参数占位符
                1 #{} 会将其替换成 ？ 防止sql注入
                2 ${} 直接拼 可能存在sql注入问题
                    参数传递的时候用#{}

                    parameterType
                    可以省略-->
    <select id="selectById"  resultMap="brandResultMap">
        select *
        from tb_brand where id= #{id}

    </select>
    <!--    条件查询的sql-->
<!--    <select id="selectByCondition" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand where-->
<!--        status =#{status}-->
<!--        and company_name like #{companyName}-->
<!--        and brand_name like #{brandName};-->

<!--    </select>-->
<!--    完成动态条件查询-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
#         where 1=1
            <where>
            <if test="status!=null">
              and  status =#{status}
            </if>
            <if test="companyName != null and companyName!= ''">
                and company_name like #{companyName}
            </if>
           <if test="brandName!=null and brandName!=''">
               and brand_name like #{brandName}
           </if>
            </where>

    </select>
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
        <choose>
         <when test="status != null">
             status = #{status}
         </when>
            <when test="companyName !=null and companyName !=''">
                 company_name like #{companyName}
            </when>
            <when test="brandName !=null and brandName!=''">
                 brandName  like #{brandName}
            </when>

        </choose>
        </where>

    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>
<!--    <update id="update">-->
<!--        update tb_brand-->
<!--        set brand_name = #{brandName},-->
<!--            company_name =#{companyName},-->
<!--            ordered =#{ordered},-->
<!--            description =#{description},-->
<!--            status=#{status}-->

<!--        where id =#{id}-->
<!--    </update>-->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName !=null and brandName != ''">
                brand_name = #{brandName}
            </if>
            <if test="companyName != null and companyName != ''">
                company_name =#{companyName}
            </if>
            <if test="ordered != null">
                ordered =#{ordered}
            </if>
            <if test="description !=null and description != ''">
                description =#{description}
            </if>
            <if test="status != null">
                status=#{status}
            </if>
        </set>

        where id =#{id}
    </update>

    <delete id="deleteById">
        delete
        from tb_brand
        where id =#{id};
    </delete>

<!--    mybatis会将数组参数 封装为一个map集合
            默认 array = ids
            可以使用Param注解来改变数组名-->
    <delete id="deleteByIds">

        delete
        from tb_brand
        where id in
            <foreach collection="array" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
            ;
    </delete>
</mapper>
